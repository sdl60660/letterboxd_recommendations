services:
  mongo:
    image: mongo:7
    command: ["mongod", "--quiet", "--logpath", "/dev/null"]
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--eval", "db.adminCommand('ping')"]
      interval: 100s
      timeout: 5s
      retries: 10
  redis:
    image: redis:8
    ports: ["6379:6379"]

  web:
    build:
      context: .
    env_file: .env
    environment:
      # Ensure the port your app binds to inside the container
      PORT: 8000
    ports: ["8000:8000"]
    dns:
      - 8.8.8.8
      - 1.1.1.1
    depends_on:
      - redis
      - mongo

  worker:
    build:
      context: .
    command: ["python", "worker.py"]
    env_file: .env
    dns:
      - 8.8.8.8
      - 1.1.1.1
    depends_on:
      - redis
      - mongo

  frontend:
    build:
      context: ./frontend
    ports:
      - "3000:3000" # expose React dev server
    environment:
      NODE_ENV: development
      BROWSER: none # <-- don't try to xdg-open
      CHOKIDAR_USEPOLLING: "true"  # good for Docker file watching
      WDS_SOCKET_PORT: "0"         # fixes websocket port behind Docker on CRA
    command: ["npm", "run", "start"]
    volumes:
      - ./frontend:/app
    working_dir: /app
    depends_on:
      - web # frontend waits for backend
    stdin_open: true
    tty: true

volumes:
  mongo-data: