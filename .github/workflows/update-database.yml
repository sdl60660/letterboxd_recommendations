name: Automated data crawl/database update

on:
  workflow_dispatch: {}
  push:
    branches: ["test-workflows"]
  schedule:
    # runs once every two days
    - cron: '0 0 */2 * *'
    # run once every two hours
    # - cron: '0 */2 * * *'

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v4

      - uses: szenius/set-timezone@v1.0
        with:
          timezoneLinux: "America/New_York"
          timezoneMacos: "America/New_York"
          timezoneWindows: "Eastern Standard Time"

      - name: Set up Python 3.12.x
        uses: actions/setup-python@v5
        with:
          python-version: "3.12.7"

      - name: Install pipenv
        run: python -m pip install --upgrade pipenv wheel

      - id: cache-pipenv
        uses: actions/cache@v4
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}

      - name: Install dependencies
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: pipenv install --deploy --dev

      - name: Crawl users data
        env:
          CONNECTION_URL: ${{ secrets.CONNECTION_URL }}
          MONGO_DB: ${{ secrets.MONGO_DB }}
          TMDB_KEY: ${{ secrets.TMDB_KEY }}
        run: cd data_processing && pipenv run python get_users.py

      - name: Crawl ratings data
        env:
          CONNECTION_URL: ${{ secrets.CONNECTION_URL }}
          MONGO_DB: ${{ secrets.MONGO_DB }}
          TMDB_KEY: ${{ secrets.TMDB_KEY }}
        run: cd data_processing && pipenv run python get_ratings.py

      - name: Get movie data
        env:
          CONNECTION_URL: ${{ secrets.CONNECTION_URL }}
          MONGO_DB: ${{ secrets.MONGO_DB }}
          TMDB_KEY: ${{ secrets.TMDB_KEY }}
        run: cd data_processing && pipenv run python get_movies.py
      
      - name: Prune inactive data
        env:
          CONNECTION_URL: ${{ secrets.CONNECTION_URL }}
          MONGO_DB: ${{ secrets.MONGO_DB }}
        run: cd data_processing && pipenv run python prune_db.py